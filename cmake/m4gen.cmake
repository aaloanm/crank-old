# m4gen - Adds custom m4 source gen commands
#	tuples - Number of type tuples (1, 2, or 3)
#	types - Type pairs ("declaration type:short suffix")
#	outvar - Variable to place paths to generated files in
#	... - Files to generate
function(m4gen tuples types outvar)
	set(type_tuples)
	if(tuples EQUAL 1)
		set(type_tuples ${types})
	elseif(tuples EQUAL 2)
		foreach(i ${types})
			foreach(j ${types})
				list(APPEND type_tuples "${i},${j}")
			endforeach(j)
		endforeach(i)
	elseif(tuples EQUAL 3)
		foreach(i ${types})
			foreach(j ${types})
				foreach(k ${types})
					list(APPEND type_tuples "${i},${j},${k}")
				endforeach(k)
			endforeach(j)
		endforeach(i)
	endif()
	set(genfiles)
	foreach(file ${ARGN})
		get_filename_component(file "${file}" ABSOLUTE)
		get_filename_component(file_name ${file} NAME_WE)
		file(RELATIVE_PATH file_path "${CMAKE_CURRENT_SOURCE_DIR}" "${file}")
		get_filename_component(file_path ${file_path} PATH)
		get_filename_component(file_ext ${file} EXT)
		set(file_path "${CMAKE_CURRENT_BINARY_DIR}/${file_path}")
		string(REGEX REPLACE "\\.m4$" "" file_ext "${file_ext}")
		if(NOT IS_DIRECTORY "${file_path}")
			file(MAKE_DIRECTORY "${file_path}")
		endif()
		foreach(tuple ${type_tuples})
			string(REPLACE "," ";" types ${tuple})
			set(suffix)
			set(m4args)
			list(APPEND m4args "-I${CMAKE_CURRENT_SOURCE_DIR}")
			list(APPEND m4args "-I${CMAKE_CURRENT_SOURCE_DIR}/m4")
			list(LENGTH types len)
			math(EXPR len "${len} - 1")
			foreach(i RANGE ${len})
				list(GET types ${i} type)
				string(REPLACE ":" ";" type ${type})
				list(GET type 0 decl_type)
				list(GET type 1 short_type)
				list(APPEND suffix "${short_type}")
				math(EXPR j "${i} + 1")
				list(APPEND m4args
					"-D_type${j}=${decl_type}")
				list(APPEND m4args
					"-D_type${j}_abv=${short_type}")
			endforeach(i)
			string(REPLACE ";" "" suffix ${suffix})
			set(gen_file "${file_path}/${file_name}${suffix}${file_ext}")
			add_custom_command(OUTPUT "${gen_file}"
				COMMAND ${m4}
				ARGS ${m4args} "${file}" > "${gen_file}"
				DEPENDS "${file}")
			list(APPEND genfiles "${gen_file}")
		endforeach(tuple)
	endforeach(file)
	set(${outvar} ${genfiles} PARENT_SCOPE)
endfunction(m4gen)
# m4gen_src_header - Generate source and header files
#	tuples - Number of type tuples (1, 2, or 3)
#	types - Type pairs ("declaration type:short suffix")
#	cfile - Source file.
#	hfile - Header file.
#	outsrcs - Variable to place paths to generated source files in
#	outheaders - Variable to place paths to generated header files in
function(m4gen_src_header tuples types cfile hfile outsrcs outheaders)
	m4gen("${tuples}" "${types}" genh "${hfile}")
	m4gen("${tuples}" "${types}" genc "${cfile}")
	list(LENGTH genh len)
	math(EXPR len "${len} - 1")
	set(src_files)
	set(header_files)
	foreach(i RANGE ${len})
		list(GET genh ${i} h)
		list(GET genc ${i} c)
		set_property(SOURCE "${c}"
			APPEND PROPERTY OBJECT_DEPENDS "${h}")
		list(APPEND src_files "${c}")
		list(APPEND header_files "${h}")
	endforeach(i)
	set(${outsrcs} ${src_files} PARENT_SCOPE)
	set(${outheaders} ${header_files} PARENT_SCOPE)
endfunction(m4gen_src_header)
